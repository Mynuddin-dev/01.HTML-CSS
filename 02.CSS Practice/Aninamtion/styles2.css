.box {
    width: 50px;
    height: 50px;
    background: red;
    border-radius: 50%;
    animation-name: change-position;
    position: relative;
    animation-duration:5s;
    /* animation-delay: 2s; */
    animation-iteration-count:3;

    /* animation-timing-function: ease-in; */
    /* slowly start */
    /* animation-timing-function: ease-out; */
    /* slowly end */
    animation-timing-function: ease-in-out;
    /* slowly start and end*/


}

@keyframes change-position {

    /* 
    animation direction
    normal - The animation is played as normal (forwards). This is default 
    reverse - The animation is played in reverse direction (backwards)
     alternate - The animation is played forwards first,then backwards
     alternate-reverse - The animation is played backwards first,then forwards

    animation-timing-function: ;
    ease - Specifies an animation with a slow start, then fast,then end slowly (this is default)
    linear - Specifies an animation with the same speed from start to end 
    ease-in - Specifies an animation with a slow start 
    ease-out - Specifies an animation with a slow end 
    ease-in-out - Specifies an animation with a slow start and end 
    cubic-bezier(n, n, n, n) - Lets you define your own values in a cubic-bezier function

    The animation-fill-mode property can have the following values: 
    none - Default value. Animation will not apply any styles to the element before or after it is executing 
    forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count) 
    backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction),
    and retain this during the animation-delay period 
    both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions

    Animation Shorthand Property
     animation-name: example;
     animation-duration: 5s;
     animation-timing-function: linear;
     animation-delay: 2s;
     animation-iteration-count: infinite;
     animation-direction: alternate;

    animation: example 5s linear 2s infinite alternate;
    

    Multiple steps If an animation has the same starting and ending properties,
    itâ€™s useful to comma-separate the 0% and 100% values inside @keyframes: @keyframes pulse {

        0%,
        100% {
            background-color: yellow;
        }

        50% {
            background-color: red;
        }
    }

    
    from{

    }
    In the example above we have specified when the style will change by using the keywords
     "from"and "to"(which represents 0% (start) and 100% (complete)).

    to{

    } */

    /* u can use any percentages value */





    0% {
        top: 0;
        left: 0;
    }

    25% {
        top: 0;
        left: 300px;
        background-color: green;
    }

    50% {
        top: 300px;
        left: 300px;
        background-color:yellow;

    }
    60%{
        background-color:black;
        width: 100px;
        height: 100px;
    }

    75% {
        top: 300px;
        left: 0px;
        background-color:lightblue;

    }
    100% {
        top: 0px;
        left: 0px;
        background-color:lightcoral;

    }
}